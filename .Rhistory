use_r("rename_based_on_codebook")
library(devtools)
library(roxygen2)
use_r("rename_based_on_codebook")
load_all()
check()
use_r("save_dot")
use_mit_license("Mario Angst")
use_mit_license("Mario Angst")
document()
?rename_based_on_codebook
animal_codebook <- data.frame(animal = c("elephant", "pig", "lizard"),family = c("mammal","mammal","reptile"))
vec <- sample(c("elephant", "pig", "lizard"), 50, TRUE)
rename_based_on_codebook(input = vec, codebook = animal_codebook, rawvar = animal, codevar = family)
animal_codebook <- data.frame(animal = c("elephant", "pig", "lizard"),family = c("mammal","mammal","reptile"))
vec <- sample(c("elephant", "pig", "lizard"), 50, TRUE)
rename_based_on_codebook(input = vec, codebook = animal_codebook, rawvar = "animal", codevar = "family")
document()
?rename_based_on_codebook
document()
check()
document()
check()
install()
?rename_based_on_codebook
use_testthat()
use_test("rename_based_on_codebook")
test_that("example works", {
animal_codebook <- data.frame(
animal = c("elephant", "pig", "lizard"),
family = c("mammal","mammal","reptile"))
vec <- c("elephant", "pig", "pig", "lizard")
rename_based_on_codebook(input = vec,
codebook = animal_codebook,
rawvar = "animal",
codevar = "family")
expect_output(c("mammal","mammal","mammal","reptile"))
})
library(testthat)
test_that("example works", {
animal_codebook <- data.frame(
animal = c("elephant", "pig", "lizard"),
family = c("mammal","mammal","reptile"))
vec <- c("elephant", "pig", "pig", "lizard")
rename_based_on_codebook(input = vec,
codebook = animal_codebook,
rawvar = "animal",
codevar = "family")
expect_output(c("mammal","mammal","mammal","reptile"))
})
test_that("example works", {
animal_codebook <- data.frame(
animal = c("elephant", "pig", "lizard"),
family = c("mammal","mammal","reptile"))
vec <- c("elephant", "pig", "pig", "lizard")
recoded <- rename_based_on_codebook(input = vec,
codebook = animal_codebook,
rawvar = "animal",
codevar = "family")
expect_output(c("mammal","mammal","mammal","reptile"))
})
test_that("example works", {
animal_codebook <- data.frame(
animal = c("elephant", "pig", "lizard"),
family = c("mammal","mammal","reptile"))
vec <- c("elephant", "pig", "pig", "lizard")
recoded <- rename_based_on_codebook(input = vec,
codebook = animal_codebook,
rawvar = "animal",
codevar = "family")
expect_output(recoded,c("mammal","mammal","mammal","reptile"))
})
library(integrater)
test_that("example works", {
animal_codebook <- data.frame(
animal = c("elephant", "pig", "lizard"),
family = c("mammal","mammal","reptile"))
vec <- c("elephant", "pig", "pig", "lizard")
recoded <- rename_based_on_codebook(input = vec,
codebook = animal_codebook,
rawvar = "animal",
codevar = "family")
expect_output(recoded,c("mammal","mammal","mammal","reptile"))
})
test_that("example works", {
animal_codebook <- data.frame(
animal = c("elephant", "pig", "lizard"),
family = c("mammal","mammal","reptile"))
vec <- c("elephant", "pig", "pig", "lizard")
recoded <- rename_based_on_codebook(input = vec,
codebook = animal_codebook,
rawvar = "animal",
codevar = "family")
expect_identicall(recoded,c("mammal","mammal","mammal","reptile"))
})
test_that("example works", {
animal_codebook <- data.frame(
animal = c("elephant", "pig", "lizard"),
family = c("mammal","mammal","reptile"))
vec <- c("elephant", "pig", "pig", "lizard")
recoded <- rename_based_on_codebook(input = vec,
codebook = animal_codebook,
rawvar = "animal",
codevar = "family")
expect_identical(recoded,c("mammal","mammal","mammal","reptile"))
})
setNames(vec,c("mammal","mammal","mammal","reptile")
)
test_that("example works", {
animal_codebook <- data.frame(
animal = c("elephant", "pig", "lizard"),
family = c("mammal","mammal","reptile"))
vec <- c("elephant", "pig", "pig", "lizard")
recoded <- rename_based_on_codebook(input = vec,
codebook = animal_codebook,
rawvar = "animal",
codevar = "family")
expect_identical(recoded,setNames(vec,c("mammal","mammal","mammal","reptile")))
})
vec <- c("elephant", "pig", "pig", "lizard")
test_that("example works", {
animal_codebook <- data.frame(
animal = c("elephant", "pig", "lizard"),
family = c("mammal","mammal","reptile"))
vec <- c("elephant", "pig", "pig", "lizard")
recoded <- rename_based_on_codebook(input = vec,
codebook = animal_codebook,
rawvar = "animal",
codevar = "family")
expect_identical(recoded,setNames(vec,c("mammal","mammal","mammal","reptile")))
})
setNames(vec,c("mammal","mammal","mammal","reptile"))
setNames(c("mammal","mammal","mammal","reptile"), vec)
test_that("example works", {
animal_codebook <- data.frame(
animal = c("elephant", "pig", "lizard"),
family = c("mammal","mammal","reptile"))
vec <- c("elephant", "pig", "pig", "lizard")
recoded <- rename_based_on_codebook(input = vec,
codebook = animal_codebook,
rawvar = "animal",
codevar = "family")
expect_identical(recoded,setNames(c("mammal","mammal","mammal","reptile"), vec))
})
use_package("DiagrammeR")
load_all()
document()
load_all()
document()
use_readme_rmd()
install()
check()
install()
install.packages("purrr")
install.packages("purrr")
library(devtools)
library(devtools)
install()
check()
install.packages("digest")
install.packages("digest")
load_all
load_all()
check()
warnings()
check()
use_package("utils")
check()
use_r("data")
check()
load("E:/Github/integrater/data/reussebene_mlnet.RData")
check()
check()
check()
load(file = "data/reussebene_mlnet.RData")
aggregate_cld(cld_concepts = cld_concepts, cld_el = cld_el,
agg_method = "w_sum", type_col = "type",
id_col = "concept",
agg_target_type = "Indirect Threat",
types_to_use_in_agg = "Indirect Threat",
max_path_length = 2,order_to_consider = 2)
load_all()
load(file = "data/reussebene_mlnet.RData")
aggregate_cld(cld_concepts = cld_concepts, cld_el = cld_el,
agg_method = "w_sum", type_col = "type",
id_col = "concept",
agg_target_type = "Indirect Threat",
types_to_use_in_agg = "Indirect Threat",
max_path_length = 2,order_to_consider = 2)
use_r("visualize_cld")
use_package("DiagrammeR")
load_all()
library(DiagrammeR)
color_list <- list(Target = "red", Goal = "green")
switch("Target", color_list)
color_list <- list("Target" = "red", "Goal" = "green")
switch("Target", color_list)
?switch
switch(EXPR = color_list, "Target")
color_list <- c("Target" = "red", "Goal" = "green")
color_list
switch("Target", color_list)
switch("red", color_list)
switch("Target","Target" = "red", "Goal" = "green")
color_mapping <- color_list
entry <- "Target"
as.character(entry) %in% names(color_mapping)
color_mapping[[as.character(entry)]]
color_mapping
color_mapping <- list("Target" = "red", "Goal" = "green")
color_mapping[[as.character(entry)]]
load_all
load_all()
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el)
cld_concepts
cld_el
graph <- DiagrammeR::create_graph()
graph
graph <- DiagrammeR::add_nodes_from_table(graph = graph,
table = concepts_df,
label_col = english,
type_col = "type")
concepts_df <- cld_concepts
graph <- DiagrammeR::add_nodes_from_table(graph = graph,
table = concepts_df,
label_col = english,
type_col = "type")
graph
graph <- DiagrammeR::add_edges_from_table(graph = graph,
table = links_df,
from_col = sender,
to_col = receiver,
from_to_map = id_external)
links_df <- cld_el
graph <- DiagrammeR::add_edges_from_table(graph = graph,
table = links_df,
from_col = sender,
to_col = receiver,
from_to_map = id_external)
unique(cld_el$sender,cld_el$receiver)
unique(unique(cld_el$sender,cld_el$receiver))
c(links_df$sender,links_df$receiver)
unique(c(links_df$sender,links_df$receiver))
graph <- DiagrammeR::create_graph()
graph <- DiagrammeR::add_nodes_from_table(graph = graph,
table = concepts_df,
label_col = "english",
type_col = "type")
graph
get_node_df(graph)
View(concepts_df)
?add_nodes_from_table
?add_edges_from_table
graph <- DiagrammeR::create_graph()
graph <- DiagrammeR::add_nodes_from_table(graph = graph,
table = concepts_df,
label_col = as.character(label_column),
type_col = "type")
label_column <- "english"
graph <- DiagrammeR::create_graph()
graph <- DiagrammeR::add_nodes_from_table(graph = graph,
table = concepts_df,
label_col = as.character(label_column),
type_col = "type")
as.character(label_column)
graph <- DiagrammeR::add_nodes_from_table(graph = graph,
table = concepts_df,
label_col = label_column,
type_col = "type")
graph <- DiagrammeR::create_graph()
graph <- DiagrammeR::add_nodes_from_table(graph = graph,
table = concepts_df,
label_col = label_column,
type_col = "type")
concepts_df
graph <- DiagrammeR::add_nodes_from_table(graph = graph,
table = concepts_df,
label_col = "english",
type_col = "type")
graph <- DiagrammeR::create_graph()
graph <- DiagrammeR::add_nodes_from_table(graph = graph,
table = concepts_df,
label_col = parse(label_column),
type_col = "type")
parse(label_column)
eval(label_column)
graph <- DiagrammeR::create_graph()
graph <- DiagrammeR::add_nodes_from_table(graph = graph,
table = concepts_df,
label_col = eval(label_column),
type_col = "type")
eval(substitute(label_column))
graph <- DiagrammeR::create_graph()
graph <- DiagrammeR::add_nodes_from_table(graph = graph,
table = concepts_df,
label_col = eval(substitute(label_column)),
type_col = "type")
do.call(DiagrammeR::add_nodes_from_table,
graph = graph,
table = concepts_df,
label_col = as.character(label_column),
type_col = "type")
graph <- DiagrammeR::create_graph()
graph <- do.call(DiagrammeR::add_nodes_from_table, list(
graph = graph,
table = concepts_df,
label_col = as.character(label_column),
type_col = "type")
)
graph
id_column <- "concept"
graph <- DiagrammeR::create_graph()
graph <- do.call(DiagrammeR::add_nodes_from_table, list(
graph = graph,
table = concepts_df,
label_col = as.character(label_column),
type_col = "type")
)
graph <- do.call(DiagrammeR::add_edges_from_table,list(
graph = graph,
table = links_df,
from_col = sender,
to_col = receiver,
from_to_map = as.character(id_column)
)
)
graph <- DiagrammeR::create_graph()
graph <- do.call(DiagrammeR::add_nodes_from_table, list(
graph = graph,
table = concepts_df,
label_col = as.character(label_column),
type_col = "type")
)
graph <- do.call(DiagrammeR::add_edges_from_table,list(
graph = graph,
table = links_df,
from_col = "sender",
to_col = "receiver",
from_to_map = as.character(id_column)
)
)
graph
load_all()
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english")
grviz(create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english"))
grViz(create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english"))
load_all()
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english")
load_all
load_all()
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english")
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
color_mapping = list(Target = "blue"))
(!(("Target" %in% concepts_df$type) &
("Activity" %in% concepts_df$type)))
load_all()
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
color_mapping = list(Target = "blue"))
warnings()
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
color_mapping = list(Target = "light blue"))
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
color_mapping = list(Target = "#f4b24150"))
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
color_mapping = list(Target = "gray"))
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
color_mapping = list(Target = "gray"), shape_mapping = list(Target = "square"))
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
color_mapping = list(Target = "gray"), shape_mapping = list(Threat = "square"))
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
color_mapping = list(Target = "gray"), shape_mapping = list(Activity = "square"))
use_package("DOT")
library(DOT)
save_cld_graph_as_svg <- function(dot_code,file){
dot_output <- gsub("\'","\"",dot_code) #because diagrammR does this in a way atom cannot handle
dot(DOT = dot_output,
file = file)
}
load_all()
create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
color_mapping = list(Target = "gray"), shape_mapping = list(Activity = "square"))
test <- create_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
color_mapping = list(Target = "gray"), shape_mapping = list(Activity = "square"))
save_cld_graph_as_svg(test$dot_code, file = "test.svg")
save_cld_graph_as_svg(test$dot_code)
load_all()
use_package("glue")
load_all()
document()
check()
load_all()
document()
check()
# # small tests
#
test <- visualize_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
layout = "dot",color_mapping = list(Target = "gray"), shape_mapping = list(Activity = "square"))
test
# # small tests
#
test <- visualize_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
layout = "circo",color_mapping = list(Target = "gray"), shape_mapping = list(Activity = "square"))
render_graph(test)
load_all()
load_all()
test <- visualize_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
layout = "dot",color_mapping = list(Target = "gray"), shape_mapping = list(Activity = "square"))
test
load_all()
load_all()
test <- visualize_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
layout = "dot",color_mapping = list(Target = "gray"), shape_mapping = list(Activity = "square"))
test
check()
check()
check()
document()
check()
load_all()
check()
check()
check()
library(integrateR)
load_all()
check()
install()
install()
install.packages("data.table")
install.packages("data.table")
install()
library(devtools)
check()
install()
install.packages("Rcpp")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install.packages("usethis")
install()
library(devtools)
install.packages("Rcpp")
install.packages("devtools")
install.packages("Rcpp")
library(Rcpp)
library(devtools)
remove.packages("Rcpp")
remove.packages("lubridate")
remove.packages("usethis")
install.packages(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
install.packages("Rcpp")
library(devtools)
load_all()
install()
install.packages("digest")
install.packages("digest")
library(devtools)
install()
install.packages("curl")
install.packages("curl")
library(curl)
library(devtools)
install()
test <- visualize_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
layout = "dot",color_mapping = list(Target = "gray"), shape_mapping = list(Activity = "square"))
test <- visualize_cld_graph(concepts_df = cld_concepts, links_df = cld_el, id_column = "concept", label_column = "english",
layout = "dot",color_mapping = list(Target = "gray"), shape_mapping = list(Activity = "square"))
